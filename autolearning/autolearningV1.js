const puppeteer = require('puppeteer');
const cheerio = require('cheerio');
const fs = require('fs');
const { finished } = require('stream');
// Danh s√°ch t√†i kho·∫£n
const accounts = [
  // { email: '052082013597', password: '052082013597' },

];

// ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ c√°c tr√¨nh duy·ªát
const browserSessions = {};

const sleep = (ms) => {
  return new Promise(rs => setTimeout(rs, ms))
}


async function loginAccount(account) {
  let browser;
  try {
    // Kh·ªüi t·∫°o tr√¨nh duy·ªát m·ªõi
    browser = await puppeteer.launch({
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    const page = await browser.newPage();

    // TƒÉng timeout l√™n 60 gi√¢y (ho·∫∑c t√πy ch·ªânh)
    console.log(`ƒêang t·∫£i trang cho ${account.email}...`);
    await page.goto('https://lms.eco-tek.com.vn/en/web/login', {
      waitUntil: 'networkidle2',
      timeout: 60000, // 60 gi√¢y
    });

    // ƒêi·ªÅn email
    await page.type('input[name="login"]', account.email, { delay: 100 });

    // ƒêi·ªÅn password
    await page.type('input[name="password"]', account.password, { delay: 100 });

    // Nh·∫•n n√∫t ƒëƒÉng nh·∫≠p v√† ƒë·ª£i ƒëi·ªÅu h∆∞·ªõng xong
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
      page.click('button[type="submit"]')
    ]);

    // üëâ L·∫•y cookie sau login
    const cookies = await page.browserContext().cookies();
    const sessionCookie = cookies.find(cookie => cookie.name === 'session_id');

    if (sessionCookie) {

      const userInfo = await fetchUserInfo(sessionCookie.value);
      console.log(`üìã Th√¥ng tin ng∆∞·ªùi d√πng cho ${account.email}:`, userInfo);
      //v√≠ d·ª•
      // {
      //   "id": 53935,
      //   "name": "NGUY·ªÑN TH·ªä B√çCH DI·ªÜU",
      //   "email": "052192015152",
      //   "active": true,
      //   "im_status": "offline",
      //   "user": { "id": 53164, "isInternalUser": true },
      //   "out_of_office_date_end": false
      // }
      console.log('check userInfo', userInfo)

      const listSlideCompleted = await fetchCompletedSlides(sessionCookie.value, userInfo);

      console.log(`üç™ session_id: ${sessionCookie.value}`);
      const linkSubject = await fetchCourseLinks(sessionCookie.value);
      console.log('check linkSubject', linkSubject)

      // L·∫•y b√†i h·ªçc t·ª´ t·ª´ng m√¥n h·ªçc
      for (const link of linkSubject) {

        const lessons = await fetchLessons(link, sessionCookie.value, link);

        // M·ªü tr√¨nh duy·ªát v√† l·∫•y API cho t·ª´ng b√†i h·ªçc
        for (const lesson of lessons) {

          if (listSlideCompleted?.includes(Number(lesson.slide_id))) {
            continue;
          } else {
            const timeLearned = await fetchGetTimeLearned(sessionCookie.value);
            const totalHours = timeLearned.hours + (timeLearned.minutes / 60);
            console.log('‚è∞ T·ªïng th·ªùi gian h·ªçc (gi·ªù):', totalHours.toFixed(2));

            if (totalHours < 7.75) {
              console.log('check time ƒë√£ v√¥ timeLearned', timeLearned)
              await fetchLessonAPIs(lesson.link, sessionCookie.value, page, browser);
            } else {
              console.log('check ƒë√£ tho√°t v·ªõi time v√† totalHours', timeLearned)
              await browser.close();
              return;
            };
          }
        }
      }
    } else {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y session_id!');
    }

    if (sessionCookie) {
      console.log(`üç™ session_id: ${sessionCookie.value}`);
    } else {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y session_id!');
    }
  } catch (error) {
    console.error(`L·ªói khi ƒëƒÉng nh·∫≠p ${account.email}:`, error.message);
    if (browser) await browser.close(); // ƒê√≥ng tr√¨nh duy·ªát n·∫øu l·ªói
    return;
  }
}

// H√†m ch·∫°y t·∫•t c·∫£ t√†i kho·∫£n ƒë·ªìng th·ªùi
async function runAllLogins() {
  console.log('B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p t·∫•t c·∫£ t√†i kho·∫£n...');
  try {
    // Ch·∫°y ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ t√†i kho·∫£n ƒë·ªìng th·ªùi
    const loginPromises = accounts.map((account) =>
      loginAccount(account)
        .then(() => console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho ${account.email}`))
        .catch((error) => console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p cho ${account.email}:`, error.message))
    );

    // Ch·ªù t·∫•t c·∫£ Promise ho√†n t·∫•t
    await Promise.all(loginPromises);

    console.log('Ho√†n t·∫•t ƒëƒÉng nh·∫≠p t·∫•t c·∫£ t√†i kho·∫£n!');
    console.log('C√°c phi√™n tr√¨nh duy·ªát ƒëang m·ªü:', Object.keys(browserSessions));
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y t·∫•t c·∫£ t√†i kho·∫£n:', error.message);
  }
}

// H√†m l·∫•y tr√¨nh duy·ªát
function getBrowser(email) {
  return browserSessions[email] || null;
}

// H√†m l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
async function fetchUserInfo(session_id) {
  try {
    const res = await fetch('https://lms.eco-tek.com.vn/mail/init_messaging', {
      method: 'POST',
      headers: {
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.9',
        'content-type': 'application/json',
        'origin': 'https://lms.eco-tek.com.vn',
        'priority': 'u=1, i',
        'referer': 'https://lms.eco-tek.com.vn/web',
        'sec-ch-ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36',
        'Cookie': `session_id=${session_id}; frontend_lang=en_US; tz=Asia/Saigon`,
      },
      body: JSON.stringify({
        id: 0,
        jsonrpc: '2.0',
        method: 'call',
        params: {},
      }),
    });

    const data = await res.json();
    if (data.result && data.result.current_partner) {
      console.log('üìã Th√¥ng tin ng∆∞·ªùi d√πng:', data.result.current_partner);
      return data.result.current_partner;
    } else {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng trong response');
      return null;
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error.message);
    return null;
  }
}

// H√†m l·∫•y danh s√°ch m√¥n h·ªçc ch∆∞a ho√†n th√†nh
async function fetchCourseLinks(session_id) {
  try {
    const res = await fetch('https://lms.eco-tek.com.vn/en/slides', {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0',
        'Accept': 'text/html,application/xhtml+xml',
        'Cookie': `session_id=${session_id}; frontend_lang=en_US; tz=Asia/Saigon`,
      },
    });

    const html = await res.text();
    const $ = cheerio.load(html);

    const courseLinks = [];
    $('div.o_wslides_course_card').each((_, el) => {
      const linkElement = $(el).find('a[href^="/en/slides/"]');
      const href = linkElement.attr('href');
      const isCompleted = $(el).find('span.badge.rounded-pill.text-bg-success').length > 0;

      if (href && !isCompleted && !courseLinks.includes(href) && !href.startsWith('/en/slides/all')) {
        courseLinks.push(href);
      }
    });

    console.log('üìö Link c√°c m√¥n h·ªçc ch∆∞a ho√†n th√†nh:', courseLinks);
    return courseLinks;
  } catch (error) {
    console.error('‚ùå L·ªói khi fetch d·ªØ li·ªáu:', error);
    return [];
  }
}

// H√†m l·∫•y danh s√°ch m√¥n h·ªçc ch∆∞a ho√†n th√†nh
async function fetchGetTimeLearned(session_id) {
  try {
    const res = await fetch('https://lms.eco-tek.com.vn/en/slides', {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0',
        'Accept': 'text/html,application/xhtml+xml',
        'Cookie': `session_id=${session_id}; frontend_lang=en_US; tz=Asia/Saigon`,
      },
    });

    const html = await res.text();
    const $ = cheerio.load(html);

    let timeLearned = { hours: 0, minutes: 0 };
    const studyTimeElement = $('a.nav-link.nav-link.d-flex:contains("Th·ªùi l∆∞·ª£ng ƒë√£ h·ªçc h√¥m nay")');
    if (studyTimeElement.length > 0) {
      const studyTimeText = studyTimeElement.text().trim();
      const match = studyTimeText.match(/(\d+)\s*gi·ªù\s*(\d+)\s*ph√∫t/);
      if (match) {
        timeLearned.hours = parseInt(match[1], 10);
        timeLearned.minutes = parseInt(match[2], 10);
      }
    }

    return timeLearned;
  } catch (error) {
    console.error('‚ùå L·ªói khi fetch d·ªØ li·ªáu:', error);
    return [];
  }
}

async function fetchLessons(slideUrl, session_id, subject) {
  try {
    const res = await fetch(`https://lms.eco-tek.com.vn${slideUrl}`, {
      method: 'GET',
      headers: {
        'Referer': 'https://lms.eco-tek.com.vn/en/slides',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'Cookie': `session_id=${session_id}; frontend_lang=en_US; tz=Asia/Saigon`,
      },
    });

    const html = await res.text();
    const $ = cheerio.load(html);

    const lessons = [];
    $('li.o_wslides_slides_list_slide.o_wslides_js_list_item').each((_, el) => {
      const linkElement = $(el).find('a.o_wslides_js_slides_list_slide_link');
      const icon = $(el).find('i').attr('class') || '';
      const title = linkElement.find('span').text().trim();
      const href = linkElement.attr('href');
      const slideId = $(el).attr('data-slide-id');
      // B·ªè qua c√°c li√™n k·∫øt ch·ª©ng ch·ªâ (c√≥ bi·ªÉu t∆∞·ª£ng trophy)
      if (href && title && !icon.includes('fa-trophy')) {
        lessons.push({ title, link: href, slide_id: slideId, subject: subject });
      }
    });
    return lessons;
  } catch (error) {
    console.error(`‚ùå L·ªói khi l·∫•y b√†i h·ªçc t·ª´ ${slideUrl}:`, error.message);
    return [];
  }
}

// H√†m l·∫•y danh s√°ch slide ƒë√£ h·ªçc
async function fetchCompletedSlides(session_id, userInfo) {
  try {
    const res = await fetch('https://lms.eco-tek.com.vn/web/dataset/call_kw/hr.attendance/web_search_read', {
      method: 'POST',
      headers: {
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.9',
        'content-type': 'application/json',
        'origin': 'https://lms.eco-tek.com.vn',
        'priority': 'u=1, i',
        'referer': 'https://lms.eco-tek.com.vn/web',
        'sec-ch-ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36',
        'Cookie': `session_id=${session_id}; frontend_lang=en_US; tz=Asia/Saigon`,
      },
      body: JSON.stringify({
        id: 5,
        jsonrpc: '2.0',
        method: 'call',
        params: {
          model: 'hr.attendance',
          method: 'web_search_read',
          args: [],
          kwargs: {
            limit: 1000, // TƒÉng limit ƒë·ªÉ l·∫•y nhi·ªÅu slide h∆°n
            offset: 0,
            order: '',
            context: {
              lang: 'vi_VN',
              tz: 'Etc/GMT-7',
              allowed_company_ids: [68],
              bin_size: true,
              params: { action: 379, model: 'hr.attendance', view_type: 'list', cids: 68, menu_id: 298 },
              create: false,
              uid: userInfo?.id
            },
            count_limit: 10001,
            domain: [],
            fields: ['employee_id', 'check_in', 'check_out', 'course_id', 'channel_id', 'slide_id', 'worked_hours'],
          },
        },
      }),
    });

    const data = await res.json();
    if (data.result && data.result.records) {
      const completedSlideIds = [...new Set(data.result.records
        .filter(record => parseFloat(record.worked_hours) > 0.0)
        .map(record => record.slide_id[0]))]; // Lo·∫°i b·ªè tr√πng l·∫∑p
      console.log('üìö Danh s√°ch slide_id ƒë√£ h·ªçc:', completedSlideIds);
      return completedSlideIds;
    } else {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y slide ƒë√£ h·ªçc trong response');
      return [];
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y slide ƒë√£ h·ªçc:', error.message);
    return [];
  }
}

// H√†m m·ªü tr√¨nh duy·ªát v√† l·∫Øng nghe API c·ªßa b√†i h·ªçc
async function fetchLessonAPIs(lessonUrl, session_id, page, browser) {
  try {
    // M·∫£ng l∆∞u tr·ªØ th√¥ng tin API
    const apiRequests = [];
    let countdownEndReceived = false;

    // Promise ƒë·ªÉ ch·ªù API countdown-end ho·∫∑c timeout
    const waitForCountdownEnd = new Promise((resolve) => {
      const timeout = setTimeout(() => {
        console.log(`‚è∞ Timeout ch·ªù API countdown-end cho ${lessonUrl}`);
        resolve();
      }, 6000000 * 2); // Timeout sau 5 ph√∫t

      page.on('request', async (request) => {
        const resourceType = request.resourceType();
        const url = request.url();

        // Ghi l·∫°i c√°c request API
        if (['xhr', 'fetch'].includes(resourceType) || url.includes('/api/') || url.includes('json')) {
          const apiData = {
            url: url,
            method: request.method(),
            headers: request.headers(),
            resourceType: resourceType,
          };
          apiRequests.push(apiData);

          // Ki·ªÉm tra API countdown-end
          if (url === 'https://lms.eco-tek.com.vn/slide/countdown-end/') {
            console.log(`üéâ Nh·∫≠n ƒë∆∞·ª£c API countdown-end cho ${lessonUrl}`);
            countdownEndReceived = true;
            clearTimeout(timeout);
            resolve({
              finished: true
            });
          }

        }
      });

      // L·∫Øng nghe response ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      page.on('response', async (response) => {
        const request = response.request();
        const url = response.url();
        if (['xhr', 'fetch'].includes(request.resourceType()) || url.includes('/api/') || url.includes('json')) {
          try {
            const responseData = await response.json().catch(() => null);
            const apiEntry = apiRequests.find((req) => req.url === url);
            if (apiEntry) {
              apiEntry.status = response.status();
              apiEntry.responseData = responseData;
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ parse JSON t·ª´ ${url}:`, error.message);
          }
        }
      });
    });

    // Truy c·∫≠p trang b√†i h·ªçc
    console.log(`ƒêang m·ªü tr√¨nh duy·ªát cho b√†i h·ªçc: ${lessonUrl}`);
    await page.goto(`https://lms.eco-tek.com.vn${lessonUrl}`, {
      waitUntil: 'networkidle2',
      timeout: 60000,
    });

    // Ch·ªù API countdown-end ho·∫∑c timeout
    return await waitForCountdownEnd;

  } catch (error) {
    console.log('check error', error)
    console.error(`‚ùå L·ªói khi l·∫•y API t·ª´ ${lessonUrl}:`, error.message);
    return [];
  }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
async function main() {
  await runAllLogins();
}

main().catch(err => console.error('L·ªói ch√≠nh:', err));